#!/usr/bin/env node

var grunt = require('grunt'),
  fs = require('fs'),
  path = require('path');

var cli = require('grunt/lib/grunt/cli');

var optlist = cli.optlist;

if(cli.options.help) return help();

grunt.cli({
  tasks: [path.join(__dirname, '../lib/tasks')],
  config: path.existsSync('./grunt.js') ? './grunt.js' : path.join(__dirname, '../grunt.js'),
  base: process.cwd()
});


// help output, borrowed to grunt.
// Done here to alter the help output, we want to expose only the
// mockup related tasks / config.
function help() {

  // Print grunt version.. Also initing colors for later use
  task.init([]);

  // the list of tasks we'd like to output
  var knowns = {
    init: {info: 'Initialize a new mockup with grunt.js and the dirs for pages, assets and json files'},
    mockup: {info: 'Generate the site content'},
    'mockup:reload': { info: 'Watch files to retrigger a new build and a page reload'},
    'mockup:serve': {info: 'Spawn a local http server on top of mockup output'},

  };

  var col1len = 0;

  var opts = Object.keys(optlist).map(function(long) {
    var o = optlist[long];
    var col1 = '--' + long + (o.short ? ', -' + o.short : '');
    col1len = Math.max(col1len, col1.length);
    return [col1, o.info];
  });

  var tasks = Object.keys(knowns)
    .map(function(name) {
      col1len = Math.max(col1len, name.length);
      var info = knowns[name].info;
      if (knowns[name].basic) {
        info += ' *';
      }
      return [name, info];
    });

  log.header('Usage');
  log.writeln(' ' + path.basename(process.argv[1]) + ' [options] [task [task ...]]');

  // Widths for options/tasks table output.
  var widths = [1, col1len, 2, 77 - col1len];

  log.header('Options');
  opts.forEach(function(a) { log.writetableln(widths, ['', a[0], '', a[1]]); });
  log.header('Tasks');
  tasks.forEach(function(a) { log.writetableln(widths, ['', a[0], '', a[1]]); });

}
